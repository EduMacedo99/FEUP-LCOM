#include <lcom/lcf.h>

#include <lcom/lab2.h>
#include <lcom/timer.h>

#include <stdbool.h>
#include <stdint.h>

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need/ it]
  lcf_trace_calls("/home/lcom/labs/lab2/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab2/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int(timer_test_read_config)(uint8_t timer, enum timer_status_field field) {

   uint8_t st;

  timer_get_conf(timer, &st);

  timer_display_conf(timer, st, field);

  return 0;
}

int(timer_test_time_base)(uint8_t timer, uint32_t freq) {
  
  timer_set_frequency(timer, freq);

  return 0;
}



uint32_t global_int_counter = 0;
uint32_t hook_id = 3;

int(timer_test_int)(uint8_t time) {

  timer_subscribe_int((uint8_t*) &hook_id);
  
int ipc_status;
message msg;
int r;
uint32_t irq_set = 8; //because the hook_id initially has the value of 3 (2^3 = 8), to check if bit #3 of msg.m_notify.interrupts is set, irq_set needs to be BIT(3)


 while(global_int_counter < time * sys_hz()) { //sys_hz is the "standard" //frequency, in this case, 60Hz
 

  if ( (r = driver_receive(ANY, &msg, &ipc_status)) != 0 ) {
    printf("driver_receive failed with: %d", r);
    continue;
  }
  if (is_ipc_notify(ipc_status)) {

    switch (_ENDPOINT_P(msg.m_source)) {
       case HARDWARE:
        if (msg.m_notify.interrupts & irq_set) {
        
        timer_int_handler(); //increments the global counter upon an interrupt
        if(global_int_counter % sys_hz() == 0){//Each (in this case) 60 interrupts...
       
        timer_print_elapsed_time();
        }

        }
        break;

      default:
        break;
      }
    }
  } 

  timer_unsubscribe_int();
  return 0;
}



int(util_get_LSB)(uint16_t val, uint8_t *lsb) {

  uint16_t value = (val & 0x00FF);  //only the LSB of val remains

  *lsb = (uint8_t) value;

  return 0;
}

int(util_get_MSB)(uint16_t val, uint8_t *msb) {

  uint16_t value = (val >> 8);  //isolates the MSB of val
  
  *msb = (uint8_t) value;

  return 0;
}
